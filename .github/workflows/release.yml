name: Upload artifacts on release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: true
      
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Setup Maven
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: 3.9.6      
    - name: Verify with Maven
      shell: bash
      run: mvn clean verify

    - name: Create jar-only build
      shell: bash 
      run: scripts/create-jar-only-build.sh
    - name: Add artifacts to release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        generate_release_notes: true
        repository: DataFlowAnalysis/product
        files: |
          products/org.dataflowanalysis.product/target/deploy/DataFlowAnalysis.linux.gtk.x86_64.tar.gz
          products/org.dataflowanalysis.product/target/deploy/DataFlowAnalysis.macosx.cocoa.x86_64.tar.gz
          products/org.dataflowanalysis.product/target/deploy/DataFlowAnalysis.win32.win32.x86_64.zip
          products/org.dataflowanalysis.product/target/deploy/DataFlowAnalysis.macosx.cocoa.aarch64.tar.gz
          products/org.dataflowanalysis.product/target/deploy/DataFlowAnalysis.jars.tar.gz
    - name: Determine name of deployment folder
      shell: bash
      run: echo "DEPLOY_FOLDER=$( echo ${{ github.repository }} | cut -d'/' -f2 | sed -e 's/\(.*\)/\L\1/' )" >> $GITHUB_ENV
    - name: Determine deployment path
      shell: bash
      run: echo "PROJECT_DEPLOY_PATH=$( echo '${{ secrets.PALLADIO_REMOTE_TARGET}}/${{ env.DEPLOY_FOLDER }}' )" >> $GITHUB_ENV
    - name: Determine deployment folder suffix
      shell: bash
      run: echo "REMOTE_PATH=$( echo '${{ env.PROJECT_DEPLOY_PATH }}/releases/${{ github.event.release.tag_name }}' )" >> $GITHUB_ENV 
    - name: Deploy to Updatesite
      uses: PalladioSimulator/Palladio-Build-ActionsPipeline-Deployment@v3
      with:
        remote-user: ${{ secrets.PALLADIO_REMOTE_USER }}
        remote-host: ${{ secrets.PALLADIO_REMOTE_HOST }}
        remote-port: ${{ secrets.PALLADIO_REMOTE_PORT }}
        server-ssh-key: ${{ secrets.PALLADIO_UPDATESITE_SSH }}
        local-source: './products/org.dataflowanalysis.product/target/deploy/*'
        remote-target: ${{ env.REMOTE_PATH }}
        link-path: ${{ env.PROJECT_DEPLOY_PATH }} 
